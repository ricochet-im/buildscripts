From f27bd6b818ec50408bcf58947ef7d2967202ddc5 Mon Sep 17 00:00:00 2001
From: John Brooks <john.brooks@dereferenced.net>
Date: Tue, 1 Nov 2016 15:32:41 -0600
Subject: [PATCH] windeployqt: Hack to use objdump for PE parsing

Hackishly use objdump to parse imports in PE executables, allowing
windeployqt to work for cross-compile MinGW environments.

Also, hardcode the MinGW sysroot bin path, so windeployqt can find
compiler binaries.

Also, include libssp with the deployed compiler binaries, because I need
it. Ideally these would be based on imports also.

This is not suitable to upstream, but smarter PE parsing should be.
---
 src/windeployqt/main.cpp  |  6 +++++-
 src/windeployqt/utils.cpp | 47 +++++++++++++++++++++++++++++++++++++++++++----
 2 files changed, 48 insertions(+), 5 deletions(-)

diff --git a/src/windeployqt/main.cpp b/src/windeployqt/main.cpp
index 9b82628..31e6de3 100644
--- a/src/windeployqt/main.cpp
+++ b/src/windeployqt/main.cpp
@@ -1013,13 +1013,17 @@ static QStringList compilerRunTimeLibs(Platform platform, bool isDebug, unsigned
     QStringList result;
     switch (platform) {
     case WindowsMinGW: { // MinGW: Add runtime libraries
-        static const char *minGwRuntimes[] = {"*gcc_", "*stdc++", "*winpthread"};
+        static const char *minGwRuntimes[] = {"*gcc_", "*stdc++", "*winpthread", "libssp*"};
+#ifdef Q_OS_WIN
         const QString gcc = findInPath(QStringLiteral("g++.exe"));
         if (gcc.isEmpty()) {
             std::wcerr << "Warning: Cannot find GCC installation directory. g++.exe must be in the path.\n";
             break;
         }
         const QString binPath = QFileInfo(gcc).absolutePath();
+#else
+        const QString binPath = QStringLiteral("/usr/i686-w64-mingw32/sys-root/mingw/bin/");
+#endif
         QDir dir(binPath);
         QStringList filters;
         const QString suffix = QLatin1Char('*') + sharedLibrarySuffix(platform);
diff --git a/src/windeployqt/utils.cpp b/src/windeployqt/utils.cpp
index a29b38b..dcf9bb3 100644
--- a/src/windeployqt/utils.cpp
+++ b/src/windeployqt/utils.cpp
@@ -931,11 +931,50 @@ QString findD3dCompiler(Platform platform, const QString &qtBinDir, unsigned wor
 
 #else // Q_OS_WIN
 
-bool readPeExecutable(const QString &, QString *errorMessage,
-                      QStringList *, unsigned *, bool *, bool)
+bool readPeExecutable(const QString &peExecutableFileName, QString *errorMessage,
+                      QStringList *dependentLibrariesIn, unsigned *wordSizeIn,
+                      bool *isDebugIn, bool)
 {
-    *errorMessage = QStringLiteral("Not implemented.");
-    return false;
+    // XXX unsafe shell
+    FILE *f = popen(QStringLiteral("objdump -p %1 | grep 'DLL Name:'").arg(peExecutableFileName).toLocal8Bit(), "r");
+    if (!f) {
+        if (errorMessage)
+            *errorMessage = QString::fromLocal8Bit(strerror(errno));
+        return false;
+    }
+
+    QByteArray output;
+    for (;;) {
+        char buf[1024];
+        int r = fread(buf, sizeof(char), sizeof(buf), f);
+        if (r <= 0) {
+            if (feof(f)) {
+                break;
+            } else {
+                if (errorMessage)
+                    *errorMessage = QString::fromLocal8Bit(strerror(errno));
+                pclose(f);
+                return false;
+            }
+        }
+        output.append(buf, r);
+    }
+    pclose(f);
+
+    QStringList libs;
+    QByteArray prefix("\tDLL Name: ");
+    foreach (const QByteArray &line, output.split('\n'))
+        libs << QString::fromLatin1(line.mid(prefix.size()).trimmed());
+
+    // XXX Assuming 32bit
+    if (wordSizeIn)
+        *wordSizeIn = 32;
+    // XXX Assuming release
+    if (isDebugIn)
+        *isDebugIn = false;
+    if (dependentLibrariesIn)
+        *dependentLibrariesIn = libs;
+    return true;
 }
 
 QString findD3dCompiler(Platform, const QString &, unsigned)
-- 
2.7.4

